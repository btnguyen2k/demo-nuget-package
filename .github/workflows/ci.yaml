name: 'ci'

on:
  push:
    branches: [ '*' ]
  pull_request:
    types: [ opened, edited, reopened, synchronize, review_requested ]
    branches: [ '*' ]
  workflow_call:

env:
  TAG_PREFIX: v
  DOTNET_VERSION: '8.x'
  NUGET_PROJECT_FILE: ./nuget.csproj

jobs:
  BuildAndTest:
    runs-on: ubuntu-latest
    outputs:
      RESULT: ${{ steps.release_dry_run.outputs.result }}
      VERSION: ${{ steps.release_dry_run.outputs.releaseVersion }}
      RELEASE_NOTES: ${{ steps.release_dry_run.outputs.releaseNotes }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
      - name: Release (dry-run)
        id: release_dry_run
        uses: btnguyen2k/action-semrelease@v3
        with:
          dry-run: true
          auto-mode: true
          github-token: ${{ secrets.GITHUB_TOKEN }}
          tag-major-release: false
          tag-minor-release: false
          branches: ${{ github.ref_name }}
          tag-prefix: ${{ env.TAG_PREFIX }}
          tag-only: true
      - name: Update NuGet metadata
        uses: actions/github-script@v7
        env:
          RESULT: ${{ steps.release_dry_run.outputs.result }}
          VERSION: ${{ steps.release_dry_run.outputs.releaseVersion }}
          RELEASE_NOTES: ${{ steps.release_dry_run.outputs.releaseNotes }}
        with:
            script: |
              console.log(`üêõ [DEBUG] RESULT: ${process.env['RESULT']}`);
              if (process.env['RESULT'] != 'SUCCESS') {
                console.log('‚ùé SKIPPED.');
                return;
              }
              console.log(`üêõ [DEBUG] RELEASE VERSION: ${process.env['VERSION']}`);
              console.log(`üêõ [DEBUG] RELEASE NOTES: ${process.env['RELEASE_NOTES']}`);

              var releaseNotes = process.env['RELEASE_NOTES'];
              releaseNotes = releaseNotes.replace(/</g, '&lt;').replace(/>/g, '&gt;');
              var fs = require('fs');
              var content = fs.readFileSync('${{ env.NUGET_PROJECT_FILE }}', 'utf8');
              content = content.replace(/<<VERSION>>/g, process.env['VERSION']);
              content = content.replace(/<<RELEASE-NOTES>>/g, releaseNotes);
              content = content.replace(/<<RELEASE_NOTES>>/g, releaseNotes);
              fs.writeFileSync('${{ env.NUGET_PROJECT_FILE }}.final', content);
      - name: Setup dotnet
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      - name: Display dotnet version
        run: dotnet --version
      - name: Build NuGet package
        run: |
          echo "üïò Building NuGet package..."
          RESULT='${{ steps.release_dry_run.outputs.result }}'
          VERSION='${{ steps.release_dry_run.outputs.releaseVersion }}'
          RELEASE_NOTES='${{ steps.release_dry_run.outputs.releaseNotes }}'
          if [ "${RESULT}" == "SUCCESS" ]; then
            mv -f ${{ env.NUGET_PROJECT_FILE }}.final ${{ env.NUGET_PROJECT_FILE }}
          else
            sed -i -E "s/<<VERSION>>/0.0.0/" ${{ env.NUGET_PROJECT_FILE }}
            sed -i -E "s/<<RELEASE-NOTES>>/empty/" ${{ env.NUGET_PROJECT_FILE }}
            sed -i -E "s/<<RELEASE_NOTES>>/empty/" ${{ env.NUGET_PROJECT_FILE }}
          fi
          cat ${{ env.NUGET_PROJECT_FILE }}
          dotnet pack
